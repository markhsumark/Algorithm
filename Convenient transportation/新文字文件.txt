#include <iostream>
using namespace std;
struct parent {
	long long int quan;
	int p;
};
int find(parent p[], int x) {
	return p[x].p == x ? x : p[x].p = find(p, p[x].p);
}

int main() {
	int i, n, m, x, y, parent1, parent2;
	cin >> n >> m;
	parent *p = new parent[n + 1];
	for (i = 0; i <= n; i++) {
		p[i].p = i;
		p[i].quan = 1;
	}
	long long int total = 0;
	while (m--) {
		cin >> x >> y;
		if (x > y) {
			int temp = x;
			x = y;
			y = temp;
		}
		parent1 = find(p, x);
		total = total - p[parent1].quan * (p[parent1].quan - 1);
		for (i = y; i > x; i--) {
			parent2 = find(p, i);
			if (parent1 != parent2) {
				total = total - p[parent2].quan * (p[parent2].quan - 1);
				p[parent1].quan += p[parent2].quan;
				p[parent2].p = parent1;
				i = parent2;
			}
			else break;
		}
		total = total + p[parent1].quan * (p[parent1].quan - 1);
		printf("%lld\n", total);
	}
}